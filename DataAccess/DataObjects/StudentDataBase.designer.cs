#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SqlProiectStudent.DataAccess.DataObjects
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="StudentDataBase")]
	public partial class StudentDataBaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMaterieTable(MaterieTable instance);
    partial void UpdateMaterieTable(MaterieTable instance);
    partial void DeleteMaterieTable(MaterieTable instance);
    partial void InsertStudentTable(StudentTable instance);
    partial void UpdateStudentTable(StudentTable instance);
    partial void DeleteStudentTable(StudentTable instance);
    #endregion
		
		public StudentDataBaseDataContext() : 
				base(global::SqlProiectStudent.Properties.Settings.Default.StudentDataBaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public StudentDataBaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StudentDataBaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StudentDataBaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StudentDataBaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<MaterieTable> MaterieTables
		{
			get
			{
				return this.GetTable<MaterieTable>();
			}
		}
		
		public System.Data.Linq.Table<NoteTable> NoteTables
		{
			get
			{
				return this.GetTable<NoteTable>();
			}
		}
		
		public System.Data.Linq.Table<StudentTable> StudentTables
		{
			get
			{
				return this.GetTable<StudentTable>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MaterieTable")]
	public partial class MaterieTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDMaterie;
		
		private string _Materia;
		
		private int _An;
		
		private int _Semestru;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDMaterieChanging(int value);
    partial void OnIDMaterieChanged();
    partial void OnMateriaChanging(string value);
    partial void OnMateriaChanged();
    partial void OnAnChanging(int value);
    partial void OnAnChanged();
    partial void OnSemestruChanging(int value);
    partial void OnSemestruChanged();
    #endregion
		
		public MaterieTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDMaterie", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDMaterie
		{
			get
			{
				return this._IDMaterie;
			}
			set
			{
				if ((this._IDMaterie != value))
				{
					this.OnIDMaterieChanging(value);
					this.SendPropertyChanging();
					this._IDMaterie = value;
					this.SendPropertyChanged("IDMaterie");
					this.OnIDMaterieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Materia", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Materia
		{
			get
			{
				return this._Materia;
			}
			set
			{
				if ((this._Materia != value))
				{
					this.OnMateriaChanging(value);
					this.SendPropertyChanging();
					this._Materia = value;
					this.SendPropertyChanged("Materia");
					this.OnMateriaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_An", DbType="Int NOT NULL")]
		public int An
		{
			get
			{
				return this._An;
			}
			set
			{
				if ((this._An != value))
				{
					this.OnAnChanging(value);
					this.SendPropertyChanging();
					this._An = value;
					this.SendPropertyChanged("An");
					this.OnAnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Semestru", DbType="Int NOT NULL")]
		public int Semestru
		{
			get
			{
				return this._Semestru;
			}
			set
			{
				if ((this._Semestru != value))
				{
					this.OnSemestruChanging(value);
					this.SendPropertyChanging();
					this._Semestru = value;
					this.SendPropertyChanged("Semestru");
					this.OnSemestruChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NoteTable")]
	public partial class NoteTable
	{
		
		private int _IDStudent;
		
		private int _IDMaterie;
		
		private System.Nullable<double> _NotaLaborator;
		
		private System.Nullable<double> _NotaExamen;
		
		public NoteTable()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDStudent", DbType="Int NOT NULL")]
		public int IDStudent
		{
			get
			{
				return this._IDStudent;
			}
			set
			{
				if ((this._IDStudent != value))
				{
					this._IDStudent = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDMaterie", DbType="Int NOT NULL")]
		public int IDMaterie
		{
			get
			{
				return this._IDMaterie;
			}
			set
			{
				if ((this._IDMaterie != value))
				{
					this._IDMaterie = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotaLaborator", DbType="Float")]
		public System.Nullable<double> NotaLaborator
		{
			get
			{
				return this._NotaLaborator;
			}
			set
			{
				if ((this._NotaLaborator != value))
				{
					this._NotaLaborator = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotaExamen", DbType="Float")]
		public System.Nullable<double> NotaExamen
		{
			get
			{
				return this._NotaExamen;
			}
			set
			{
				if ((this._NotaExamen != value))
				{
					this._NotaExamen = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentTable")]
	public partial class StudentTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDStudent;
		
		private string _Nume;
		
		private string _Prenume;
		
		private string _CNP;
		
		private int _An;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDStudentChanging(int value);
    partial void OnIDStudentChanged();
    partial void OnNumeChanging(string value);
    partial void OnNumeChanged();
    partial void OnPrenumeChanging(string value);
    partial void OnPrenumeChanged();
    partial void OnCNPChanging(string value);
    partial void OnCNPChanged();
    partial void OnAnChanging(int value);
    partial void OnAnChanged();
    #endregion
		
		public StudentTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDStudent", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDStudent
		{
			get
			{
				return this._IDStudent;
			}
			set
			{
				if ((this._IDStudent != value))
				{
					this.OnIDStudentChanging(value);
					this.SendPropertyChanging();
					this._IDStudent = value;
					this.SendPropertyChanged("IDStudent");
					this.OnIDStudentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nume", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nume
		{
			get
			{
				return this._Nume;
			}
			set
			{
				if ((this._Nume != value))
				{
					this.OnNumeChanging(value);
					this.SendPropertyChanging();
					this._Nume = value;
					this.SendPropertyChanged("Nume");
					this.OnNumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prenume", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Prenume
		{
			get
			{
				return this._Prenume;
			}
			set
			{
				if ((this._Prenume != value))
				{
					this.OnPrenumeChanging(value);
					this.SendPropertyChanging();
					this._Prenume = value;
					this.SendPropertyChanged("Prenume");
					this.OnPrenumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CNP", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CNP
		{
			get
			{
				return this._CNP;
			}
			set
			{
				if ((this._CNP != value))
				{
					this.OnCNPChanging(value);
					this.SendPropertyChanging();
					this._CNP = value;
					this.SendPropertyChanged("CNP");
					this.OnCNPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_An", DbType="Int NOT NULL")]
		public int An
		{
			get
			{
				return this._An;
			}
			set
			{
				if ((this._An != value))
				{
					this.OnAnChanging(value);
					this.SendPropertyChanging();
					this._An = value;
					this.SendPropertyChanged("An");
					this.OnAnChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
